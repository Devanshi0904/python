Module 6

Python Fundamentals


Que – 1   Introduction to Python



1.	Introduction to Python and its Features (simple, high-level, interpreted language).

•	Introduction to Python and its Features

-	Python is a popular, general-purpose programming language created by Guido van Rossum in 1991. 
-	It is widely used in web development, data science, artificial intelligence, machine learning, automation, and many other fields. 
-	Python is known for its simplicity and readability, which makes it a great choice for beginners as well as professionals.

•	Key Features of Python

o	Simple and Easy to Learn

-	Python has a clean and straightforward syntax similar to English, making it easy to read and write.
-	Beginners can quickly understand and start coding without much difficulty.
o	High-Level Language

-	Python allows programmers to focus on solving problems rather than dealing with complex details of the computer (like memory management).
-	This makes development faster and more efficient.

o	Interpreted Language

-	Python does not need to be compiled before running.
-	The code is executed line by line by the Python interpreter, which makes debugging easier.

o	Cross-Platform

-	Python can run on different operating systems such as Windows, macOS, Linux, etc., without modification.

o	Extensive Libraries and Frameworks

-	Python has a rich collection of built-in modules and third-party libraries for different 

o	Object-Oriented and Procedural

-	Python supports different programming paradigms, including object-oriented, procedural, and functional programming.

o	Dynamic Typing

-	You don’t need to declare the type of variables explicitly. Python automatically detects the type at runtime.


2.	History and evolution of Python.

-	In the late 1980s, history was about to be written. It was that time when working on Python started. Soon after that, Guido Van Rossum began doing its application-based work in December of 1989 at Centrum Wiskunde & Informatica (CWI) which is situated in the Netherlands.
-	 It was started as a hobby project because he was looking for an interesting project to keep him occupied during Christmas.
-	The programming language in which Python is said to have succeeded is ABC Programming Language, which had interfacing with the Amoeba Operating System and had the feature of exception handling. He had already helped create ABC earlier in his career and had seen some issues with ABC but liked most of the features. 
-	After that what he did was very clever. He had taken the syntax of ABC, and some of its good features. It came with a lot of complaints too, so he fixed those issues completely and created a good scripting language that had removed all the flaws.


•	Evolution of Python
-	The language was finally released in 1991. When it was released, it used a lot fewer codes to express the concepts, when we compare it with Java , C++ & C .
-	 Its design philosophy was quite good too. Its main objective is to provide code readability and advanced developer productivity. When it was released, it had more than enough capability to provide classes with inheritance, several core data types of exception handling and functions.



3.	Advantages of using Python over other programming languages.

-	Python offers several advantages over other programming languages, making it a popular choice across various domains:

•	Simplicity and Readability:

-	Python's syntax is designed to be clear and concise, resembling natural language. This leads to highly readable code, which simplifies learning, writing, and maintaining programs.

•	Versatility and Wide Applicability: 

-	Python is a general-purpose language used in diverse fields, including web development (Django, Flask), data science and machine learning, automation, scripting, scientific computing, and more.

•	Extensive Libraries and Frameworks:

-	Python boasts a vast ecosystem of pre-built libraries and frameworks that address common programming tasks. This significantly reduces development time and effort by providing readily available solutions for complex functionalities.

•	Improved Productivity:

-	The combination of simple syntax, extensive libraries, and interpreter-based execution allows for rapid prototyping and faster development cycles compared to languages requiring more verbose code or compilation steps.


•	Portability:
-	Python code can run on various operating systems with minimal or no modifications, promoting cross-platform compatibility.

•	Large and Active Community:

-	Python benefits from a massive and supportive community of developers. This provides ample resources for learning, troubleshooting, and staying updated with the latest advancements.

•	Open Source and Free:

-	Python is open-source and freely available for use, even for commercial purposes, eliminating licensing costs.

•	Ease of Integration:

-	Python can be easily integrated with other languages like C, C++, and Java, allowing developers to leverage existing codebases or optimize performance-critical sections.



4.	Installing Python and setting up the development environment (Anaconda, PyCharm, or VS Code).

-	Setting up a Python development environment involves installing Python and choosing an Integrated Development Environment (IDE) or code editor.

1.	Installing Python:

•	Download:
-	Obtain the Python installer from the official Python website (python.org/downloads). Choose the latest stable Python 3 version suitable for your operating system (Windows, macOS, or Linux).

•	Installation:

-	Run the downloaded installer. During the installation process, it is recommended to check the option "Add Python to PATH" (or similar wording) on Windows to allow easy access to Python from the command line. Follow the on-screen instructions to complete the installation.

•	Verification: 

-	Open a command prompt or terminal and type python --version or python3 --version. This command should display the installed Python version, confirming a successful installation.



5.	Writing and executing your first Python program.

-  	Install Python:

Ensure Python is installed on your system. You can download the latest version from the official Python website. During installation, it is recommended to select the option "Add Python to PATH" for easier execution from the command line.

-   Choose a Text Editor or IDE:
Use a plain text editor like Notepad (Windows), TextEdit (macOS), or a more advanced Integrated Development Environment (IDE) like VS Code or PyCharm.

-   Create a Python File:
Open your chosen text editor or IDE.
Type the following simple Python code:
 -  example :

        print("Hello, Python!")

Save the file with a .py extension (e.g., hello.py). Choose a location on your computer where you can easily find it.

-   Execute the Program:
Using the Command Line/Terminal:
Open your system's command prompt (Windows) or terminal (macOS/Linux).
Navigate to the directory where you saved your hello.py file using the cd command (e.g., cd C:\Users\YourUser\PythonPrograms).
Execute the script by typing python hello.py and pressing Enter.
Using an IDE: If you are using an IDE like VS Code or PyCharm, there will typically be a "Run" button or a keyboard shortcut to execute the current Python file directly within the IDE's environment.
Observe the Output:
Upon successful execution, the text "Hello, Python!" will be displayed in your terminal or IDE's output window. This confirms your first Python program has run successfully.
